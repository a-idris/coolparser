
PROGRAM -> CLASS ; PROGRAM | CLASS ;
CLASS -> class type_id CLASS_TYPE { FEATURE_LIST } ;
CLASS_TYPE -> inherits type_id | eps
FEATURE_LIST -> FEATURE ; FEATURE_LIST | eps
FEATURE -> object_id ( ARGSLIST ) : type { EXPR }
         | object_id : type OPT_EXPR_ASSIGNMENT 

ARGSLIST -> ARGSLIST' | eps
ARGSLIST' -> ARGSLIST' , FORMAL | FORMAL

OPT_EXPR_ASSIGNMENT -> EXPR_ASSIGNMENT | eps
EXPR_ASSIGNMENT -> <- EXPR
FORMAL -> object_id : type

EXPR -> object_id EXPR_ASSIGNMENT
    | EXPR OPTIONAL_TYPE . object_id ( EXPR_ARGS )
    | object_id ( EXPR_LIST ) 
    | if EXPR then EXPR else EXPR fi
    | while EXPR loop EXPR pool
    | { EXPR_LIST }
    | let LET_ARGS in EXPR
    | case EXPR of CASE_ARGS esac
    | new type_id
    | isvoid EXPR
    | EXPR + EXPR
    | EXPR − EXPR
    | EXPR ∗ EXPR
    | EXPR / EXPR
    | ~ EXPR
    | EXPR < EXPR
    | EXPR <= EXPR
    | EXPR = EXPR
    | not EXPR
    | ( EXPR )
    | object_id
    | integer
    | string
    | true
    | false

OPTIONAL_TYPE -> @ type_id | eps

EXPR_ARGS -> EXPR_ARGS' | eps
EXPR_ARGS' -> EXPR_ARGS' , EXPR | EXPR

EXPR_LIST -> EXPR ; EXPR_LIST | EXPR

LET_ARGS ->  LET_ARG LET_ARGS'
LET_ARGS' -> , LET_ARG LET_ARGS' | eps
LET_ARG -> object_id : type_id OPT_EXPR_ASSIGNMENT

CASE_ARGS -> CASE_ARG CASE_ARGS | CASE_ARG 
CASE_ARG -> object_id : type_id => EXPR ; 