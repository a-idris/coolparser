    PROGRAM -> CLASS ; PROGRAM | CLASS ;
    CLASS -> class type_id CLASS_TYPE { FEATURE_LIST } ;
    CLASS_TYPE -> inherits type_id | eps
    FEATURE_LIST -> FEATURE ; FEATURE_LIST | eps
    FEATURE -> object_id ( ARGSLIST ) : type { EXPR }
             | object_id : type OPT_EXPR_ASSIGNMENT 

    ARGSLIST -> ARGSLIST' | eps
    ARGSLIST' -> ARGSLIST' , FORMAL | FORMAL

    OPT_EXPR_ASSIGNMENT -> EXPR_ASSIGNMENT | eps
    EXPR_ASSIGNMENT -> <- EXPR
    FORMAL -> object_id : type
        
    EXPR -> object_id ( EXPR_ARGS ) | if EXPR then EXPR else EXPR fi | while EXPR loop EXPR pool | { EXPR_LIST } 
            | let LET_ARGS in EXPR | case EXPR of CASE_ARGS esac | new type_id 
            | EXPR  <- ASSIGNMENT_EXPR | ASSIGNMENT_EXPR
            
    ASSIGNMENT_EXPR -> not BOOLEAN_COMPLEMENT_EXPR | BOOLEAN_COMPLEMENT_EXPR
    
    BOOLEAN_COMPLEMENT_EXPR -> BOOLEAN_COMPLEMENT_EXPR <= COMPARISON_EXPR
                            | BOOLEAN_COMPLEMENT_EXPR < COMPARISON_EXPR 
                            | BOOLEAN_COMPLEMENT_EXPR = COMPARISON_EXPR 
                            | COMPARISON_EXPR
    
    COMPARISON_EXPR -> COMPARISON_EXPR + ADDOP_EXPR   
                    |  COMPARISON_EXPR - ADDOP_EXPR
                    | ADDOP_EXPR   
    
    ADDOP_EXPR -> ADDOP_EXPR * MULTOP_EXPR   
                    | ADDOP_EXPR / MULTOP_EXPR 
                    | MULTOP_EXPR  
    
    MULTOP_EXPR -> isvoid CHECKVOID_EXPR | CHECKVOID_EXPR
    
    CHECKVOID_EXPR -> ~ INTEGER_COMPLEMENT_EXPR | INTEGER_COMPLEMENT_EXPR
    
    INTEGER_COMPLEMENT_EXPR -> DISPATCH_TYPE_EXPR @ type_id | DISPATCH_TYPE_EXPR
    
    DISPATCH_TYPE_EXPR  -> DISPATCH_EXPR . object_id ( EXPR_ARGS ) | DISPATCH_EXPR 
    
    DISPATCH_EXPR -> CONSTANT | ID | ( EXPR )
    
    CONSTANT -> integer | string | true | false
    
    ID -> object_id
    
    OPTIONAL_TYPE -> @ type_id | eps

    EXPR_ARGS -> EXPR_ARGS' | eps
    EXPR_ARGS' -> EXPR_ARGS' , EXPR | EXPR
    
    EXPR_LIST -> EXPR ; EXPR_LIST | EXPR
    
    LET_ARGS ->  LET_ARG LET_ARGS'
    LET_ARGS' -> , LET_ARG LET_ARGS' | eps
    LET_ARG -> object_id : type_id OPT_EXPR_ASSIGNMENT
    
    CASE_ARGS -> CASE_ARG CASE_ARGS | CASE_ARG 
    CASE_ARG -> object_id : type_id => EXPR ; 

    -----------
    ASSIGNMENT_EXPR
    BOOLEAN_COMPLEMENT_EXPR
    COMPARISON_EXPR
    ADDOP_EXPR
    MULTOP_EXPR
    CHECKVOID_EXPR
    INTEGER_COMPLEMENT_EXPR
    DISPATCH_TYPE_EXPR
    DISPATCH_EXPR    CONST  ID
    